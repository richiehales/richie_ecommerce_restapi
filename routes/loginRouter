const express = require('express');
const loginRouter = express.Router();
const passport = require('passport');
const initializePassport = require('../routes/passport-config');
const { getUserByEmail, getUserById } = require('../models/user');
const bcrypt = require('bcrypt');
const loginInstance = require('../models/login.js');

initializePassport(passport, getUserByEmail, getUserById);


// Display user 'logged in' page
// http://localhost:3000/login/auth
loginRouter.get('/auth', checkAuthenticated, (req, res) => {
  res.render('index.ejs', { name: req.user.first_name });
});

// Display Register page
// http://localhost:3000/login/auth/register
loginRouter.get('/auth/register', checkNotAuthenticated, (req, res) => {
  res.render('register.ejs');
});

// Add / Register user to user_info table (Also in userRouter)
loginRouter.post('/auth/register', async (req, res) => {
  try {
    const hashedPassword = await bcrypt.hash(req.body.password, 3)
    const email = req.body.email
    const first_name = req.body.first_name
    const last_name = req.body.last_name


    if (!hashedPassword || !email || !first_name || !last_name) {
      return res.status(400).send('Please provide password, email, first_name and last_name in the request body.');
    }

    const registrationResult = await loginInstance.registerUser(hashedPassword, email, first_name, last_name);

    if (registrationResult.success) {
      // Successfully registered
      res.redirect('/login/auth/login');

    } else {
      // Failed registration
      res.redirect('/login/auth/register')
    }
  } catch (error) {
    console.error('Error:', error); // Log the error to the console
    res.status(500).send('Internal Server Error');
  }
});

// Display Login page
// http://localhost:3000/login/auth/login
loginRouter.get('/auth/login', checkNotAuthenticated, (req, res) => {
  res.render('login.ejs',);
});

// Handle login post request
loginRouter.post('/auth/login', checkNotAuthenticated, passport.authenticate('local', {
  successRedirect: '/login/auth',
  failureRedirect: '/login/auth/login',
  failureFlash: true
}));


function checkAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return next()
  }
  res.redirect('auth/login')
}

function checkNotAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return res.redirect('/login/auth')
  }
  next()
}

module.exports = loginRouter;
